package hr.teosoft.ccp.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import hr.teosoft.ccp.domain.Course;
import hr.teosoft.ccp.domain.Curriculum;
import hr.teosoft.ccp.domain.CourseSchedule;
import hr.teosoft.ccp.domain.Day;
import hr.teosoft.ccp.domain.Lecture;
import hr.teosoft.ccp.domain.Period;
import hr.teosoft.ccp.domain.Room;
import hr.teosoft.ccp.domain.Teacher;
import hr.teosoft.ccp.domain.Timeslot;
import hr.teosoft.ccp.domain.UnavailablePeriodPenalty;
import hr.teosoft.ccp.domain.solver.CourseConflict;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
//  HARD CONSTRAINTS
// ############################################################################

// Lectures: A missing or extra lecture of a course.
// This hard constraint is build-in: the correct number of Lecture's is created

// Conflicts: Two conflicting lectures in the same period.
// Three conflicting lectures count as 3 violations: one for each pair.
rule "conflictingLecturesDifferentCourseInSamePeriod"
    when
        $courseConflict : CourseConflict($leftCourse : leftCourse, $rightCourse : rightCourse)
        $leftLecture : Lecture(course == $leftCourse, $period : period, period != null)
        $rightLecture : Lecture(course == $rightCourse, period == $period, this != $leftLecture)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $courseConflict.getConflictCount());
end
rule "conflictingLecturesSameCourseInSamePeriod"
    when
        Lecture($leftId : id, $leftCourse : course, $period : period, period != null)
        Lecture(course == $leftCourse, period == $period, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - (1 + $leftCourse.getCurriculumList().size()));
end

// RoomOccupancy: Two lectures in the same room at the same period.
// Any extra lecture in the same period and room counts as one more violation.
rule "roomOccupancy"
    when
        Lecture($leftId : id, period != null, $period : period, room != null, $room : room)
        // $leftLecture has lowest id of the period+room combo
        not Lecture(period == $period, room == $room, id < $leftId)
        // rightLecture has the same period
        Lecture(period == $period, room == $room, id > $leftId, $rightId : id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Availabilities: Each lecture in a period unavailable for that course.
rule "unavailablePeriodPenalty"
    when
        UnavailablePeriodPenalty($course : course, $period : period)
        Lecture(course == $course, period == $period)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "roomType"
  when
    Lecture(course != null, room != null, room.type != course.requiredRoomType)
  then
    scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// ############################################################################
//  SOFT CONSTRAINTS
// ############################################################################

// RoomCapacity: For each lecture, the number of students that attend the course should be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        $room : Room($capacity : capacity)
        Lecture(room == $room, studentSize > $capacity, $studentSize : studentSize)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($capacity - $studentSize));
end

// MinimumWorkingDays: The lectures of each course should be spread into a minimum number of days.
// Each day below the minimum counts as 5 points of penalty.
rule "minimumWorkingDays"
    when
        $course : Course($minWorkingDaySize : minWorkingDaySize)
        $dayCount : Number(intValue < $minWorkingDaySize) from accumulate(
            $day : Day()
            and exists Lecture(course == $course, day == $day),
            count($day)
        )
        // An uninitialized schedule should have no constraints broken
        exists Lecture(course == $course, period != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, (($dayCount.intValue() - $minWorkingDaySize) * 5));
end

// CurriculumCompactness: Lectures belonging to a curriculum should be adjacent
// to each other (i.e., in consecutive periods).
// For a given curriculum we account for a violation every time there is one lecture not adjacent
// to any other lecture within the same day.
// Each isolated lecture in a curriculum counts as 2 points of penalty.
rule "curriculumCompactness"
    when
        $curriculum : Curriculum()

        Lecture(curriculumList contains $curriculum,
            $day : day, $timeslotIndex : timeslotIndex, period != null
        )
        not Lecture(curriculumList contains $curriculum,
            day == $day, timeslotIndex == ($timeslotIndex - 1)
        )
        not Lecture(curriculumList contains $curriculum,
            day == $day, timeslotIndex == ($timeslotIndex + 1)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -2);
end

// RoomStability: All lectures of a course should be given in the same room.
// Each distinct room used for the lectures of a course, but the first, counts as 1 point of penalty.
rule "roomStability"
    when
        $course : Course()
        $roomCount : Number(intValue > 1) from accumulate(
            $room : Room()
            and exists Lecture(course == $course, room == $room),
            count($room)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -($roomCount.intValue() - 1));
end

rule "preferredDays"
    when
        Lecture(course != null, period != null, course.preferredDays != null, course.preferredDays not contains period.day.dayIndex)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -10);
end

rule "preferredTimeslots"
    when
        Lecture(course != null, period != null, course.preferredTimeslots != null, course.preferredTimeslots not contains period.timeslot.timeslotIndex)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -10);
end
